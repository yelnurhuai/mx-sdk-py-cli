from typing import List
from erdpy.projects.interfaces import IProject


class EEIVersion:
    def __init__(self, value: str) -> None:
        self.value = value


_v1_4 = EEIVersion("1.4")
_vNext = EEIVersion("vNext")


class EEIFunction:
    def __init__(self, name: str, available_in: List[EEIVersion], tags: List[str]) -> None:
        self.name = name
        self.available_in = available_in
        self.tags = tags


_eei_registry: List[EEIFunction] = [
    # big int
    EEIFunction("bigIntNew", [_v1_4, _vNext], []),
    EEIFunction("bigIntUnsignedByteLength", [_v1_4, _vNext], []),
    EEIFunction("bigIntSignedByteLength", [_v1_4, _vNext], []),
    EEIFunction("bigIntGetUnsignedBytes", [_v1_4, _vNext], []),
    EEIFunction("bigIntGetSignedBytes", [_v1_4, _vNext], []),
    EEIFunction("bigIntSetUnsignedBytes", [_v1_4, _vNext], []),
    EEIFunction("bigIntSetSignedBytes", [_v1_4, _vNext], []),
    EEIFunction("bigIntIsInt64", [_v1_4, _vNext], []),
    EEIFunction("bigIntGetInt64", [_v1_4, _vNext], []),
    EEIFunction("bigIntSetInt64", [_v1_4, _vNext], []),
    EEIFunction("bigIntAdd", [_v1_4, _vNext], []),
    EEIFunction("bigIntSub", [_v1_4, _vNext], []),
    EEIFunction("bigIntMul", [_v1_4, _vNext], []),
    EEIFunction("bigIntTDiv", [_v1_4, _vNext], []),
    EEIFunction("bigIntTMod", [_v1_4, _vNext], []),
    EEIFunction("bigIntEDiv", [_v1_4, _vNext], []),
    EEIFunction("bigIntEMod", [_v1_4, _vNext], []),
    EEIFunction("bigIntPow", [_v1_4, _vNext], []),
    EEIFunction("bigIntLog2", [_v1_4, _vNext], []),
    EEIFunction("bigIntSqrt", [_v1_4, _vNext], []),
    EEIFunction("bigIntAbs", [_v1_4, _vNext], []),
    EEIFunction("bigIntNeg", [_v1_4, _vNext], []),
    EEIFunction("bigIntSign", [_v1_4, _vNext], []),
    EEIFunction("bigIntCmp", [_v1_4, _vNext], []),
    EEIFunction("bigIntNot", [_v1_4, _vNext], []),
    EEIFunction("bigIntAnd", [_v1_4, _vNext], []),
    EEIFunction("bigIntOr", [_v1_4, _vNext], []),
    EEIFunction("bigIntXor", [_v1_4, _vNext], []),
    EEIFunction("bigIntShr", [_v1_4, _vNext], []),
    EEIFunction("bigIntShl", [_v1_4, _vNext], []),
    EEIFunction("bigIntFinishUnsigned", [_v1_4, _vNext], []),
    EEIFunction("bigIntFinishSigned", [_v1_4, _vNext], []),
    EEIFunction("bigIntStorageStoreUnsigned", [_v1_4, _vNext], []),
    EEIFunction("bigIntStorageLoadUnsigned", [_v1_4, _vNext], []),
    EEIFunction("bigIntGetUnsignedArgument", [_v1_4, _vNext], []),
    EEIFunction("bigIntGetSignedArgument", [_v1_4, _vNext], []),
    EEIFunction("bigIntGetCallValue", [_v1_4, _vNext], []),
    EEIFunction("bigIntGetESDTCallValue", [_v1_4, _vNext], []),
    EEIFunction("bigIntGetESDTCallValueByIndex", [_v1_4, _vNext], []),
    EEIFunction("bigIntGetESDTExternalBalance", [_v1_4, _vNext], []),
    EEIFunction("bigIntGetExternalBalance", [_v1_4, _vNext], []),

    # small int
    EEIFunction("smallIntGetUnsignedArgument", [_v1_4, _vNext], []),
    EEIFunction("smallIntGetSignedArgument", [_v1_4, _vNext], []),
    EEIFunction("smallIntFinishUnsigned", [_v1_4, _vNext], []),
    EEIFunction("smallIntFinishSigned", [_v1_4, _vNext], []),
    EEIFunction("smallIntStorageStoreUnsigned", [_v1_4, _vNext], []),
    EEIFunction("smallIntStorageStoreSigned", [_v1_4, _vNext], []),
    EEIFunction("smallIntStorageLoadUnsigned", [_v1_4, _vNext], []),
    EEIFunction("smallIntStorageLoadSigned", [_v1_4, _vNext], []),
    EEIFunction("int64getArgument", [_v1_4, _vNext], []),
    EEIFunction("int64storageStore", [_v1_4, _vNext], []),
    EEIFunction("int64storageLoad", [_v1_4, _vNext], []),
    EEIFunction("int64finish", [_v1_4, _vNext], []),

    # buffers
    EEIFunction("mBufferNew", [_v1_4, _vNext], []),
    EEIFunction("mBufferNewFromBytes", [_v1_4, _vNext], []),
    EEIFunction("mBufferGetLength", [_v1_4, _vNext], []),
    EEIFunction("mBufferGetBytes", [_v1_4, _vNext], []),
    EEIFunction("mBufferGetByteSlice", [_v1_4, _vNext], []),
    EEIFunction("mBufferCopyByteSlice", [_v1_4, _vNext], []),
    EEIFunction("mBufferEq", [_v1_4, _vNext], []),
    EEIFunction("mBufferSetBytes", [_v1_4, _vNext], []),
    EEIFunction("mBufferSetByteSlice", [_vNext], []),
    EEIFunction("mBufferAppend", [_v1_4, _vNext], []),
    EEIFunction("mBufferAppendBytes", [_v1_4, _vNext], []),
    EEIFunction("mBufferToBigIntUnsigned", [_v1_4, _vNext], []),
    EEIFunction("mBufferToBigIntSigned", [_v1_4, _vNext], []),
    EEIFunction("mBufferFromBigIntUnsigned", [_v1_4, _vNext], []),
    EEIFunction("mBufferFromBigIntSigned", [_v1_4, _vNext], []),
    EEIFunction("mBufferStorageStore", [_v1_4, _vNext], []),
    EEIFunction("mBufferStorageLoad", [_v1_4, _vNext], []),
    EEIFunction("mBufferStorageLoadFromAddress", [_vNext], []),
    EEIFunction("mBufferGetArgument", [_v1_4, _vNext], []),
    EEIFunction("mBufferFinish", [_v1_4, _vNext], []),
    EEIFunction("mBufferSetRandom", [_v1_4, _vNext], []),

    # eei core
    EEIFunction("getSCAddress", [_v1_4, _vNext], []),
    EEIFunction("getOwnerAddress", [_v1_4, _vNext], []),
    EEIFunction("getShardOfAddress", [_v1_4, _vNext], []),
    EEIFunction("isSmartContract", [_v1_4, _vNext], []),
    EEIFunction("getExternalBalance", [_v1_4, _vNext], []),
    EEIFunction("blockHash", [_v1_4, _vNext], []),
    EEIFunction("transferValue", [_v1_4, _vNext], []),
    EEIFunction("transferESDTExecute", [_v1_4, _vNext], []),
    EEIFunction("transferESDTNFTExecute", [_v1_4, _vNext], []),
    EEIFunction("multiTransferESDTNFTExecute", [_v1_4, _vNext], []),
    EEIFunction("transferValueExecute", [_v1_4, _vNext], []),
    EEIFunction("getArgumentLength", [_v1_4, _vNext], []),
    EEIFunction("getArgument", [_v1_4, _vNext], []),
    EEIFunction("getFunction", [_v1_4, _vNext], []),
    EEIFunction("getNumArguments", [_v1_4, _vNext], []),
    EEIFunction("storageStore", [_v1_4, _vNext], []),
    EEIFunction("storageLoadLength", [_v1_4, _vNext], []),
    EEIFunction("storageLoad", [_v1_4, _vNext], []),
    EEIFunction("storageLoadFromAddress", [_v1_4, _vNext], []),
    EEIFunction("getCaller", [_v1_4, _vNext], []),
    EEIFunction("checkNoPayment", [_v1_4, _vNext], []),
    EEIFunction("callValue", [_v1_4, _vNext], []),
    EEIFunction("getESDTValue", [_v1_4, _vNext], []),
    EEIFunction("getESDTTokenName", [_v1_4, _vNext], []),
    EEIFunction("getESDTTokenNonce", [_v1_4, _vNext], []),
    EEIFunction("getESDTTokenType", [_v1_4, _vNext], []),
    EEIFunction("getCallValueTokenName", [_v1_4, _vNext], []),
    EEIFunction("getESDTValueByIndex", [_v1_4, _vNext], []),
    EEIFunction("getESDTTokenNameByIndex", [_v1_4, _vNext], []),
    EEIFunction("getESDTTokenNonceByIndex", [_v1_4, _vNext], []),
    EEIFunction("getESDTTokenTypeByIndex", [_v1_4, _vNext], []),
    EEIFunction("getCallValueTokenNameByIndex", [_v1_4, _vNext], []),
    EEIFunction("getNumESDTTransfers", [_v1_4, _vNext], []),
    EEIFunction("getCurrentESDTNFTNonce", [_v1_4, _vNext], []),
    EEIFunction("writeLog", [_v1_4, _vNext], ["deprecated"]),
    EEIFunction("writeEventLog", [_v1_4, _vNext], []),
    EEIFunction("returnData", [_v1_4, _vNext], []),
    EEIFunction("signalError", [_v1_4, _vNext], []),
    EEIFunction("getGasLeft", [_v1_4, _vNext], []),
    EEIFunction("getESDTBalance", [_v1_4, _vNext], []),
    EEIFunction("getESDTNFTNameLength", [_v1_4, _vNext], []),
    EEIFunction("getESDTNFTAttributeLength", [_v1_4, _vNext], []),
    EEIFunction("getESDTNFTURILength", [_v1_4, _vNext], []),
    EEIFunction("getESDTTokenData", [_v1_4, _vNext], []),
    EEIFunction("getESDTLocalRoles", [_vNext], []),
    EEIFunction("validateTokenIdentifier", [_vNext], []),
    EEIFunction("executeOnDestContext", [_v1_4, _vNext], []),
    EEIFunction("executeOnDestContextByCaller", [_v1_4, _vNext], []),
    EEIFunction("executeOnSameContext", [_v1_4, _vNext], []),
    EEIFunction("executeReadOnly", [_v1_4, _vNext], []),
    EEIFunction("createContract", [_v1_4, _vNext], []),
    EEIFunction("deployFromSourceContract", [_v1_4, _vNext], []),
    EEIFunction("upgradeContract", [_v1_4, _vNext], []),
    EEIFunction("upgradeFromSourceContract", [_v1_4, _vNext], []),
    EEIFunction("asyncCall", [_v1_4, _vNext], []),
    EEIFunction("getNumReturnData", [_v1_4, _vNext], []),
    EEIFunction("getReturnDataSize", [_v1_4, _vNext], []),
    EEIFunction("getReturnData", [_v1_4, _vNext], []),
    EEIFunction("cleanReturnData", [_vNext], []),
    EEIFunction("deleteFromReturnData", [_vNext], []),
    EEIFunction("setStorageLock", [_v1_4, _vNext], []),
    EEIFunction("getStorageLock", [_v1_4, _vNext], []),
    EEIFunction("isStorageLocked", [_v1_4, _vNext], []),
    EEIFunction("clearStorageLock", [_v1_4, _vNext], []),
    EEIFunction("getBlockTimestamp", [_v1_4, _vNext], []),
    EEIFunction("getBlockNonce", [_v1_4, _vNext], []),
    EEIFunction("getBlockRound", [_v1_4, _vNext], []),
    EEIFunction("getBlockEpoch", [_v1_4, _vNext], []),
    EEIFunction("getBlockRandomSeed", [_v1_4, _vNext], []),
    EEIFunction("getStateRootHash", [_v1_4, _vNext], []),
    EEIFunction("getPrevBlockTimestamp", [_v1_4, _vNext], []),
    EEIFunction("getPrevBlockNonce", [_v1_4, _vNext], []),
    EEIFunction("getPrevBlockRound", [_v1_4, _vNext], []),
    EEIFunction("getPrevBlockEpoch", [_v1_4, _vNext], []),
    EEIFunction("getPrevBlockRandomSeed", [_v1_4, _vNext], []),
    EEIFunction("getOriginalTxHash", [_v1_4, _vNext], []),

    # eei core (managed)
    EEIFunction("managedSCAddress", [_v1_4, _vNext], []),
    EEIFunction("managedOwnerAddress", [_v1_4, _vNext], []),
    EEIFunction("managedCaller", [_v1_4, _vNext], []),
    EEIFunction("managedSignalError", [_v1_4, _vNext], []),
    EEIFunction("managedWriteLog", [_v1_4, _vNext], []),
    EEIFunction("managedMultiTransferESDTNFTExecute", [_v1_4, _vNext], []),
    EEIFunction("managedTransferValueExecute", [_v1_4, _vNext], []),
    EEIFunction("managedExecuteOnDestContext", [_v1_4, _vNext], []),
    EEIFunction("managedExecuteOnDestContextByCaller", [_v1_4, _vNext], []),
    EEIFunction("managedExecuteOnSameContext", [_v1_4, _vNext], []),
    EEIFunction("managedExecuteReadOnly", [_v1_4, _vNext], []),
    EEIFunction("managedCreateContract", [_v1_4, _vNext], []),
    EEIFunction("managedDeployFromSourceContract", [_v1_4, _vNext], []),
    EEIFunction("managedUpgradeContract", [_v1_4, _vNext], []),
    EEIFunction("managedUpgradeFromSourceContract", [_v1_4, _vNext], []),
    EEIFunction("managedAsyncCall", [_v1_4, _vNext], []),
    EEIFunction("managedGetMultiESDTCallValue", [_v1_4, _vNext], []),
    EEIFunction("managedGetESDTBalance", [_v1_4, _vNext], []),
    EEIFunction("managedGetESDTTokenData", [_v1_4, _vNext], []),
    EEIFunction("managedGetReturnData", [_v1_4, _vNext], []),
    EEIFunction("managedGetPrevBlockRandomSeed", [_v1_4, _vNext], []),
    EEIFunction("managedGetBlockRandomSeed", [_v1_4, _vNext], []),
    EEIFunction("managedGetStateRootHash", [_v1_4, _vNext], []),
    EEIFunction("managedGetOriginalTxHash", [_v1_4, _vNext], []),

    # crypto
    EEIFunction("sha256", [_v1_4, _vNext], []),
    EEIFunction("managedSha256", [_vNext], []),
    EEIFunction("keccak256", [_v1_4, _vNext], []),
    EEIFunction("managedKeccak256", [_vNext], []),
    EEIFunction("ripemd160", [_v1_4, _vNext], []),
    EEIFunction("verifyBLS", [_v1_4, _vNext], []),
    EEIFunction("verifyEd25519", [_v1_4, _vNext], []),
    EEIFunction("verifySecp256k1", [_v1_4, _vNext], []),
    EEIFunction("verifyCustomSecp256k1", [_v1_4, _vNext], []),
    EEIFunction("encodeSecp256k1DerSignature", [_v1_4, _vNext], []),
    EEIFunction("addEC", [_v1_4, _vNext], []),
    EEIFunction("doubleEC", [_v1_4, _vNext], []),
    EEIFunction("isOnCurveEC", [_v1_4, _vNext], []),
    EEIFunction("scalarBaseMultEC", [_v1_4, _vNext], []),
    EEIFunction("scalarMultEC", [_v1_4, _vNext], []),
    EEIFunction("marshalEC", [_v1_4, _vNext], []),
    EEIFunction("unmarshalEC", [_v1_4, _vNext], []),
    EEIFunction("marshalCompressedEC", [_v1_4, _vNext], []),
    EEIFunction("unmarshalCompressedEC", [_v1_4, _vNext], []),
    EEIFunction("generateKeyEC", [_v1_4, _vNext], []),
    EEIFunction("createEC", [_v1_4, _vNext], []),
    EEIFunction("getCurveLengthEC", [_v1_4, _vNext], []),
    EEIFunction("getPrivKeyByteLengthEC", [_v1_4, _vNext], []),
    EEIFunction("ellipticCurveGetValues", [_v1_4, _vNext], [])
]


def analyze_compatibility(project: IProject):
    pass
